{"version":3,"sources":["app.js","services/mainService.js","routes/home/homeCtrl.js","directives/hamMenu/hamMenu.js","directives/mainMenuBar/mainMenuBar.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","service","$http","$state","getIpInformation","ipAddress","method","data","then","res","getOpenPorts","$scope","$stateParams","mainService","$rootScope","cmdResponse","anotherRequest","loadingText","validateIp","ipAdd","test","push","swal","console","log"],"mappings":";;AAAAA,QAAQC,MAAR,CAAe,KAAf,EAAsB,CAAC,WAAD,CAAtB,EAECC,MAFD,CAEQ,UAASC,cAAT,EAAyBC,kBAAzB,EAA6C;AACnD;AACA;AACAD,iBACCE,KADD,CACO,MADP,EACe;AACbC,SAAK,GADQ;AAEbC,iBAAa,iCAFA;AAGbC,gBAAY;AAHC,GADf;AAMAJ,qBAAmBK,SAAnB,CAA6B,GAA7B;AACD,CAZD,E,CAYG;;;ACZHT,QAAQC,MAAR,CAAe,KAAf,EAAsBS,OAAtB,CAA8B,aAA9B,EAA6C,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACnE,OAAKC,gBAAL,GAAwB,UAASC,SAAT,EAAmB;AACzC,WAAOH,MAAM;AACXI,cAAQ,KADG;AAEXT,WAAK,iBAAeQ,SAFT;AAGXE,YAAM;AAHK,KAAN,EAIJC,IAJI,CAIC,UAASC,GAAT,EAAa;AACnB,aAAOA,GAAP;AACD,KANM,CAAP;AAOD,GARD;AASA,OAAKC,YAAL,GAAoB,UAASL,SAAT,EAAmB;AACrC,WAAOH,MAAM;AACXI,cAAQ,KADG;AAEXT,WAAK,gBAAcQ,SAFR;AAGXE,YAAM;AAHK,KAAN,EAIJC,IAJI,CAIC,UAASC,GAAT,EAAa;AACnB,aAAOA,GAAP;AACD,KANM,CAAP;AAOD,GARD;AASD,CAnBD,E,CAmBI;;;ACnBJlB,QAAQC,MAAR,CAAe,KAAf,EAAsBO,UAAtB,CAAiC,UAAjC,EAA4C,UAASY,MAAT,EAAiBC,YAAjB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAuD;AACjGH,SAAOI,WAAP,GAAqB,IAArB;AACAJ,SAAOK,cAAP,GAAwB,KAAxB;AACAL,SAAOM,WAAP,GAAqB,0BAArB;AACAN,SAAOO,UAAP,GAAoB,UAASC,KAAT,EAAe;AACjC;AACA;AACA,QAAG,mKAAmKC,IAAnK,CAAwKD,KAAxK,CAAH,EAAkL;AAChLR,aAAOM,WAAP,GAAqB,4BAArB;AACAJ,kBAAYT,gBAAZ,CAA6Be,KAA7B,EAAoCX,IAApC,CAAyC,UAASC,GAAT,EAAa;AACtDE,eAAOI,WAAP,GAAqB,EAArB;AACAJ,eAAOI,WAAP,CAAmBM,IAAnB,CAAwBZ,IAAIF,IAA5B;AACAG,qBAAaS,KAAb;AACD,OAJC;AAKH,KAPC,MAOG;AACHG,WAAK,yCAAL;AACD;AACA,GAbD;AAcA,MAAIZ,eAAe,SAAfA,YAAe,CAASS,KAAT,EAAe;AAChCI,YAAQC,GAAR,CAAY,6BAAZ,EAA2CL,KAA3C;AACAR,WAAOK,cAAP,GAAwB,IAAxB;AACAH,gBAAYH,YAAZ,CAAyBS,KAAzB,EAAgCX,IAAhC,CAAqC,UAASC,GAAT,EAAa;AAChDc,cAAQC,GAAR,CAAY,uCAAZ,EAAoDf,GAApD;AACAE,aAAOI,WAAP,CAAmBM,IAAnB,CAAwBZ,IAAIF,IAA5B;AACAI,aAAOK,cAAP,GAAwB,KAAxB;AACD,KAJD;AAKD,GARD;AASD,CA3BD,E,CA2BG;AC3BH;ACAA","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router'])\r\n\r\n.config(function($stateProvider, $urlRouterProvider) {\r\n  //default router\r\n  //home page and landing page\r\n  $stateProvider\r\n  .state('home', {\r\n    url: '/',\r\n    templateUrl: './app/routes/home/homeTemp.html',\r\n    controller: 'homeCtrl'\r\n  });\r\n  $urlRouterProvider.otherwise('/');\r\n});//closing\r\n","angular.module('app').service('mainService', function($http, $state) {\r\n  this.getIpInformation = function(ipAddress){\r\n    return $http({\r\n      method: \"GET\",\r\n      url: \"/api/config/\"+ipAddress,\r\n      data: {}\r\n    }).then(function(res){\r\n      return res;\r\n    });\r\n  };\r\n  this.getOpenPorts = function(ipAddress){\r\n    return $http({\r\n      method: \"GET\",\r\n      url: \"/api/openP/\"+ipAddress,\r\n      data: {}\r\n    }).then(function(res){\r\n      return res;\r\n    });\r\n  };\r\n}); //closing\r\n","angular.module('app').controller('homeCtrl',function($scope, $stateParams, mainService, $rootScope){\r\n  $scope.cmdResponse = null;\r\n  $scope.anotherRequest = false;\r\n  $scope.loadingText = \"Push button to make call\";\r\n  $scope.validateIp = function(ipAdd){\r\n    //console.log(\"validateIp fired ip: \",ipAdd);\r\n    //overstack credit for this validation\r\n    if(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipAdd)){\r\n      $scope.loadingText = \"Request: ipconfig\\nLOADING\";\r\n      mainService.getIpInformation(ipAdd).then(function(res){\r\n      $scope.cmdResponse = [];\r\n      $scope.cmdResponse.push(res.data);\r\n      getOpenPorts(ipAdd);\r\n    });\r\n  }else{\r\n    swal(\"You have entered an invalid IP address!\");\r\n  }\r\n  };\r\n  let getOpenPorts = function(ipAdd){\r\n    console.log(\"frontend ctrl getping fired\", ipAdd);\r\n    $scope.anotherRequest = true;\r\n    mainService.getOpenPorts(ipAdd).then(function(res){\r\n      console.log(\"get open ports response from server :\",res);\r\n      $scope.cmdResponse.push(res.data);\r\n      $scope.anotherRequest = false;\r\n    });\r\n  };\r\n});//closing\r\n","",""]}