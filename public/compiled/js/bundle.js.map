{"version":3,"sources":["app.js","services/mainService.js","directives/hamMenu/hamMenu.js","directives/mainMenuBar/mainMenuBar.js","routes/home/homeCtrl.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","service","$http","$state","getIpInformation","ipAddress","method","then","res","getOpenPorts","getScanNet","destroy","$scope","$stateParams","mainService","$rootScope","$interval","$timeout","cmdResponse","scanProgress","anotherRequest","requestCount","loadingText","myCounter","console","log","validateIp","ipAdd","test","push","data","swal","scanNet","myInterCounter","status","cancel","cancelScan","scanCancelled","portFlag","port"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router'])\r\n\r\n.config(function($stateProvider, $urlRouterProvider) {\r\n  //default router\r\n  //home page and landing page\r\n  $stateProvider\r\n  .state('home', {\r\n    url: '/',\r\n    templateUrl: './app/routes/home/homeTemp.html',\r\n    controller: 'homeCtrl'\r\n  });\r\n  $urlRouterProvider.otherwise('/');\r\n});//closing\r\n","angular.module('app').service('mainService', function($http, $state) {\r\n  this.getIpInformation = function(ipAddress){\r\n    return $http({\r\n      method: \"GET\",\r\n      url: \"/api/config/\"+ipAddress\r\n    }).then(function(res){\r\n      return res;\r\n    });\r\n  };\r\n  this.getOpenPorts = function(ipAddress){\r\n    return $http({\r\n      method: \"GET\",\r\n      url: \"/api/openP/\"+ipAddress\r\n    }).then(function(res){\r\n      return res;\r\n    });\r\n  };\r\n  this.getScanNet = ()=>{\r\n    return $http({\r\n      method: \"GET\",\r\n      url: \"/api/scanNet\"\r\n    }).then((res)=>{\r\n      return res;\r\n    });\r\n  };\r\n  this.destroy = ()=>{\r\n    return $http({\r\n      method: \"DELETE\",\r\n      url: \"/api/destroyScan\"\r\n    });\r\n  };\r\n}); //closing\r\n","","","angular.module('app').controller('homeCtrl',function($scope, $stateParams, mainService, $rootScope, $interval, $timeout){\r\n  $scope.cmdResponse = null;\r\n  $scope.scanProgress = false;\r\n  $scope.anotherRequest = false;\r\n  $scope.requestCount = 0;\r\n  $scope.loadingText = \"Push button to make call\";\r\n  function myCounter(){\r\n    console.log(\"mycounter fired \",$scope.requestCount);\r\n    ++$scope.requestCount;\r\n  }\r\n  $scope.validateIp = function(ipAdd){\r\n    //overstack credit for this validation\r\n    if(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipAdd)){\r\n      $scope.loadingText = \"Request: ipconfig\\nLOADING\";\r\n      mainService.getIpInformation(ipAdd).then(function(res){\r\n      $scope.cmdResponse = [];\r\n      $scope.cmdResponse.push(res.data);\r\n      getOpenPorts(ipAdd);\r\n    });\r\n  }else{\r\n    swal(\"You have entered an invalid IP address!\");\r\n  }\r\n  };\r\n  let getOpenPorts = function(ipAdd){\r\n    console.log(\"frontend ctrl getping fired\", ipAdd);\r\n    $scope.anotherRequest = true;\r\n    mainService.getOpenPorts(ipAdd).then(function(res){\r\n      console.log(\"get open ports response from server :\",res);\r\n      $scope.cmdResponse.push(res.data);\r\n      $scope.anotherRequest = false;\r\n    });\r\n  };\r\n  $scope.scanNet = ()=>{\r\n    $scope.scanProgress = \"SCAN IN PROGRESS....\";\r\n    // let myInterCounter = setInterval(myCounter,1000);\r\n    let myInterCounter = $interval(myCounter,1000);\r\n    //call service api call\r\n    mainService.getScanNet().then((res)=>{\r\n      if(res.status == 200){\r\n        $scope.scanProgress = false;\r\n        $interval.cancel(myInterCounter);\r\n        console.log(\"SCAN NET PROMISE RETURN\", res);\r\n        $scope.cmdResponse = res.data;\r\n      }else{\r\n        $scope.scanProgress = res.data;\r\n        $interval.cancel(myInterCounter);\r\n      }\r\n    });\r\n  };\r\n  $scope.cancelScan = ()=>{\r\n    console.log(\"Cancel front ctrl fired\");\r\n    //main service call\r\n    mainService.destroy().then((res)=>{\r\n      console.log(\"Cancel return \", res);\r\n      $scope.scanCancelled = res.data;\r\n    });\r\n    $timeout(()=>{$scope.scanCancelled = null;},5000);\r\n  }\r\n\r\n  //change background if port is flagged\r\n  $scope.portFlag = (port)=>{\r\n    if(port==80){\r\n      return {\r\n        \"background-color\":\"#D4524E\"\r\n      }\r\n    }\r\n  }\r\n});//closing\r\n"]}